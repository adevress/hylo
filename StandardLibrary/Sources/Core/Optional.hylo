/// Either an instance of `T` or the absence thereof.
///
/// Use `Optional` when you need to represent a value that may or may not be present.
public typealias Optional<T> = Union<T, None<T>>

/// The absence of an instance of `T`.
public type None<T>: Regular {

  /// Creates a value denoting the absence of an instance of `T`.
  public memberwise init

}

public extension Optional {

  /// Returns a value denoting the absence of an instance.
  public static fun none() -> Self {
    None() as Optional
  }

}

// Note: We can't declare confitional conformance of `Optional` to "umbrella traits" yet without
// causing ambiguities. See #1566

public conformance Optional: Deinitializable where T: Deinitializable {}

public conformance Optional: Equatable where T: Equatable {}
